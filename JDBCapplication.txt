A] Design and implement JDBC applications.

Sorce Code:

sql
Copy code
CREATE DATABASE IF NOT EXISTS sampledb;
USE sampledb;

CREATE TABLE IF NOT EXISTS employees (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    age INT
);


------------------JAVA CODE------------------------------------------
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class JDBCTutorial {
    // JDBC URL, username, and password of MySQL server
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/sampledb";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";

    public static void main(String[] args) {
        try {
            // Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish a connection
            try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
                System.out.println("Connected to the database!");

                // Insert data into the table
                insertData(connection, "John Doe", 30);
                insertData(connection, "Jane Smith", 25);

                // Read data from the table
                readData(connection);
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    private static void insertData(Connection connection, String name, int age) throws SQLException {
        String insertQuery = "INSERT INTO employees (name, age) VALUES (?, ?)";

        try (PreparedStatement preparedStatement = connection.prepareStatement(insertQuery)) {
            preparedStatement.setString(1, name);
            preparedStatement.setInt(2, age);

            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Data inserted successfully!");
            } else {
                System.out.println("Failed to insert data.");
            }
        }
    }

    private static void readData(Connection connection) throws SQLException {
        String selectQuery = "SELECT id, name, age FROM employees";

        try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            System.out.println("Employee Data:");
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                int age = resultSet.getInt("age");

                System.out.println("ID: " + id + ", Name: " + name + ", Age: " + age);
            }
        }
    }
}




------------------------------------------------------------------------------------
B]  Practical based on Kruskalâ€™s algorithm:

Source code:
class Graph {
    constructor(vertices) {
        this.vertices = vertices;
        this.edges = [];
    }

    addEdge(source, destination, weight) {
        this.edges.push({ source, destination, weight });
    }

    find(parent, i) {
        if (parent[i] === i) {
            return i;
        }
        return this.find(parent, parent[i]);
    }

    union(parent, rank, x, y) {
        const xRoot = this.find(parent, x);
        const yRoot = this.find(parent, y);

        if (rank[xRoot] < rank[yRoot]) {
            parent[xRoot] = yRoot;
        } else if (rank[xRoot] > rank[yRoot]) {
            parent[yRoot] = xRoot;
        } else {
            parent[yRoot] = xRoot;
            rank[xRoot]++;
        }
    }

    kruskalMST() {
        const result = [];
        this.edges.sort((a, b) => a.weight - b.weight);

        const parent = new Array(this.vertices);
        const rank = new Array(this.vertices).fill(0);

        for (let i = 0; i < this.vertices; i++) {
            parent[i] = i;
        }

        let edgeIndex = 0;
        while (result.length < this.vertices - 1) {
            const nextEdge = this.edges[edgeIndex++];

            const x = this.find(parent, nextEdge.source);
            const y = this.find(parent, nextEdge.destination);

            if (x !== y) {
                result.push(nextEdge);
                this.union(parent, rank, x, y);
            }
        }

        this.printMST(result);
    }

    printMST(result) {
        console.log("Edge \tWeight");
        result.forEach(edge => {
            console.log(`${edge.source} - ${edge.destination}\t${edge.weight}`);
        });
    }
}

// Example usage
const graph = new Graph(5);
graph.addEdge(0, 1, 2);
graph.addEdge(0, 3, 1);
graph.addEdge(1, 2, 4);
graph.addEdge(1, 3, 3);
graph.addEdge(1, 4, 5);
graph.addEdge(2, 4, 6);
graph.addEdge(3, 4, 7);

graph.kruskalMST();
