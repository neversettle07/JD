A) Design GUI based java application using AWT, Swing with Event Handling


CODE:
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SimpleGUIApp {

    public static void main(String[] args) {
        // Create the main frame
        JFrame frame = new JFrame("Simple GUI Application");
        frame.setSize(400, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create a panel to hold components
        JPanel panel = new JPanel();
        frame.add(panel);
        placeComponents(panel);

        // Make the frame visible
        frame.setVisible(true);
    }

    private static void placeComponents(JPanel panel) {
        panel.setLayout(null);

        // Create a label
        JLabel label = new JLabel("Welcome to Simple GUI App");
        label.setBounds(10, 20, 300, 25);
        panel.add(label);

        // Create a button
        JButton button = new JButton("Click Me");
        button.setBounds(10, 50, 150, 25);

        // Add an ActionListener to handle button clicks
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "Button Clicked!");
            }
        });

        panel.add(button);
    }
}





---------------------------------------------------------------------------------

B]Practical based on Greedy Algorithm-Primâ€™s



CODE:
class Graph {
    constructor(vertices) {
        this.vertices = vertices;
        this.adjacencyMatrix = new Array(vertices).fill(null).map(() => new Array(vertices).fill(0));
    }

    addEdge(source, destination, weight) {
        this.adjacencyMatrix[source][destination] = weight;
        this.adjacencyMatrix[destination][source] = weight;
    }

    primMST() {
        const parent = new Array(this.vertices).fill(-1);
        const key = new Array(this.vertices).fill(Number.MAX_VALUE);
        const mstSet = new Array(this.vertices).fill(false);

        key[0] = 0;
        parent[0] = -1;

        for (let count = 0; count < this.vertices - 1; count++) {
            const u = this.minKey(key, mstSet);

            mstSet[u] = true;

            for (let v = 0; v < this.vertices; v++) {
                if (this.adjacencyMatrix[u][v] && !mstSet[v] && this.adjacencyMatrix[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = this.adjacencyMatrix[u][v];
                }
            }
        }

        this.printMST(parent, key);
    }

    minKey(key, mstSet) {
        let min = Number.MAX_VALUE;
        let minIndex = -1;

        for (let v = 0; v < this.vertices; v++) {
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                minIndex = v;
            }
        }

        return minIndex;
    }

    printMST(parent, key) {
        console.log("Edge \tWeight");
        for (let i = 1; i < this.vertices; i++) {
            console.log(`${parent[i]} - ${i}\t${key[i]}`);
        }
    }
}

// Example usage
const graph = new Graph(5);
graph.addEdge(0, 1, 2);
graph.addEdge(0, 3, 1);
graph.addEdge(1, 2, 4);
graph.addEdge(1, 3, 3);
graph.addEdge(1, 4, 5);
graph.addEdge(2, 4, 6);
graph.addEdge(3, 4, 7);

graph.primMST();

