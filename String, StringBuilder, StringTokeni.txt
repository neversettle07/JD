String, StringBuilder, StringTokenizer

A) Design application using String, StringBuilder, StringTokenizer

import java.util.StringTokenizer;
public class StringApplication {
    public static void main(String[] args) {
        String inputSentence = "This is a sample sentence";
        System.out.println("Sentence: "+inputSentence);

        String reversedSentence = reverseWords(inputSentence);

        tokenizeSentence(reversedSentence);
    }

    private static String reverseWords(String sentence) {
        String[] words = sentence.split(" ");
        StringBuilder reversedSentenceBuilder = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            reversedSentenceBuilder.append(words[i]).append(" ");
        }

        String reversedSentence = reversedSentenceBuilder.toString().trim();
        System.out.println("Reversed Sentence: " + reversedSentence);
        return reversedSentence;
    }

    private static void tokenizeSentence(String sentence) {
        StringTokenizer tokenizer = new StringTokenizer(sentence);

        System.out.println("\nTokenized Words:");
        while (tokenizer.hasMoreTokens()) {
            String word = tokenizer.nextToken();
            System.out.println(word);
        }
    }
}

===========================================================================
B)Graph implementation and graph traversals

class Graph {
  constructor() {
    this.vertices = [];
    this.edges = new Map();
  }

  addVertex(vertex) {
    this.vertices.push(vertex);
    this.edges.set(vertex, []);
  }

  addEdge(vertex1, vertex2) {
    this.edges.get(vertex1).push(vertex2);
    this.edges.get(vertex2).push(vertex1); // Assuming an undirected graph
  }

  dfs(startVertex, callback) {
    const visited = new Set();
    this.dfsHelper(startVertex, visited, callback);
  }

  dfsHelper(vertex, visited, callback) {
    visited.add(vertex);
    callback(vertex);

    for (const neighbor of this.edges.get(vertex)) {
      if (!visited.has(neighbor)) {
        this.dfsHelper(neighbor, visited, callback);
      }
    }
  }

  bfs(startVertex, callback) {
    const visited = new Set();
    const queue = [startVertex];
    visited.add(startVertex);

    while (queue.length !== 0) {
      const vertex = queue.shift();
      callback(vertex);

      for (const neighbor of this.edges.get(vertex)) {
        if (!visited.has(neighbor)) {
          visited.add(neighbor);
          queue.push(neighbor);
        }
      }
    }
  }

  dijkstra(startVertex) {
    const distances = new Map();
    const visited = new Set();
    const priorityQueue = new PriorityQueue();

    // Initialize distances and enqueue the start vertex with distance 0
    this.vertices.forEach((vertex) => {
      distances.set(vertex, vertex === startVertex ? 0 : Infinity);
      priorityQueue.enqueue(vertex, distances.get(vertex));
    });

    while (!priorityQueue.isEmpty()) {
      const currentVertex = priorityQueue.dequeue();

      if (visited.has(currentVertex)) {
        continue;
      }

      visited.add(currentVertex);

      for (const neighbor of this.edges.get(currentVertex)) {
        const distance = distances.get(currentVertex) + 1; // Assuming unweighted graph

        if (distance < distances.get(neighbor)) {
          distances.set(neighbor, distance);
          priorityQueue.enqueue(neighbor, distance);
        }
      }
    }

    return distances;
  }
}

class PriorityQueue {
  constructor() {
    this.items = [];
  }

  enqueue(element, priority) {
    const queueElement = { element, priority };
    let added = false;

    for (let i = 0; i < this.items.length; i++) {
      if (priority < this.items[i].priority) {
        this.items.splice(i, 0, queueElement);
        added = true;
        break;
      }
    }

    if (!added) {
      this.items.push(queueElement);
    }
  }

  dequeue() {
    if (this.isEmpty()) {
      return "Queue is empty";
    }

    return this.items.shift().element;
  }

  isEmpty() {
    return this.items.length === 0;
  }
}

// Example usage:
const graph = new Graph();

graph.addVertex('A');
graph.addVertex('B');
graph.addVertex('C');
graph.addVertex('D');
graph.addVertex('E');

graph.addEdge('A', 'B');
graph.addEdge('A', 'C');
graph.addEdge('B', 'D');
graph.addEdge('C', 'E');
graph.addEdge('D', 'E');

console.log('DFS traversal:');
graph.dfs('A', (vertex) => console.log(vertex));

console.log('\nBFS traversal:');
graph.bfs('A', (vertex) => console.log(vertex));

console.log('\nShortest distances using Dijkstra\'s Algorithm:');
const distances = graph.dijkstra('A');
distances.forEach((distance, vertex) => console.log(`${vertex}: ${distance}`));
